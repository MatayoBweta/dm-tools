/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.unhcr.eg.registration.tool.token.printing;

import org.unhcr.eg.registration.tool.token.printing.panel.TokenDateFilter;
import org.unhcr.eg.registration.tool.token.printing.panel.TokenUpdatePanel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javafx.application.Platform;
import javax.swing.Timer;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingx.painter.GlossPainter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.*;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.unhcr.eg.registration.tool.token.printing.chart.ArrivalChart;
import org.unhcr.eg.registration.tool.token.printing.service.TokenManagerService;
import org.unhcr.eg.registration.tool.token.printing.service.TokenSummaryTableModel;
import org.unhcr.eg.registration.tool.token.printing.service.TokenTableModel;
import org.unhcr.eg.registration.tool.token.printing.service.VisitCategoryController;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.unhcr.eg.registration.tool.token.printing//TokenPrinting//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TokenPrintingTopComponent",
        iconBase = "org/unhcr/eg/registration/tool/token/printing/printer-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.unhcr.eg.registration.tool.token.printing.TokenPrintingTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TokenPrintingAction",
        preferredID = "TokenPrintingTopComponent"
)
@Messages({
    "CTL_TokenPrintingAction=Token Printing",
    "CTL_TokenPrintingTopComponent=Token Printing Window",
    "HINT_TokenPrintingTopComponent=This is a Token Printing Window"
})
public final class TokenPrintingTopComponent extends TopComponent {

    public final static String reportLocation = "org/unhcr/eg/registration/tool/token/printing/reporttemplate/Token_Reception.jasper";
    public final static String reportViewLocation = "org/unhcr/eg/registration/tool/token/printing/reporttemplate/Token_Reception_view.jasper";
    private final TokenTableModel tokenTableModel;
    private final TokenSummaryTableModel tokenSummaryTableModel;
    private ArrivalChart arrivalChart;
    private TokenUpdatePanel tokenUpdatePanel;
    private final SimpleDateFormat sdf = new SimpleDateFormat(
            "EEE, d MMM yyyy HH:mm:ss");

    public TokenPrintingTopComponent() {
        initComponents();
        try {
            arrivalChart = new ArrivalChart();
            tokenUpdatePanel = new TokenUpdatePanel(reportLocation);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }

        reportPanel.add(arrivalChart, BorderLayout.CENTER);
        dataCollectionPanel.add(tokenUpdatePanel, BorderLayout.CENTER);
        
        Platform.runLater(() -> {
            try {
                arrivalChart.init();
                tokenUpdatePanel.init();
                arrivalChart.getFreshData();
                reportPanel.repaint();
                dataCollectionPanel.repaint();
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        });
        ActionListener taskPerformer = (ActionEvent evt) -> {
            timeLabel.setText("<html>" + sdf.format(new Date()));
        };
        Timer timer = new Timer(1000, taskPerformer);
        timer.setRepeats(true);
        timer.start();
        setName(Bundle.CTL_TokenPrintingTopComponent());
        setToolTipText(Bundle.HINT_TokenPrintingTopComponent());
        tokenTableModel = new TokenTableModel();
        tokenSummaryTableModel = new TokenSummaryTableModel();
    
        mainHeader.setBackground(new Color(128, 128, 128, 100));
     
        mainHeader.setBackgroundPainter(new GlossPainter(GlossPainter.GlossPosition.TOP));
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        visitCategories = ObservableCollections.observableList(VisitCategoryController.getSectionList())
        ;
        visitReasons = ObservableCollections.observableList(new ArrayList());
        gates = ObservableCollections.observableList(VisitCategoryController.getGateList())
        ;
        categoryButtonGroup = new javax.swing.ButtonGroup();
        mainHeader = new org.jdesktop.swingx.JXHeader();
        jPanel9 = new javax.swing.JPanel();
        reportPanel = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        reloadChartButton = new javax.swing.JButton();
        dailyToggleButton = new javax.swing.JToggleButton();
        cumulativeToggleButton = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        dataCollectionPanel = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        mainHeader.setDescriptionFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        mainHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unhcr/eg/registration/tool/token/printing/printer-64.png"))); // NOI18N
        mainHeader.setIconPosition(org.jdesktop.swingx.JXHeader.IconPosition.LEFT);
        mainHeader.setTitle(org.openide.util.NbBundle.getMessage(TokenPrintingTopComponent.class, "TokenPrintingTopComponent.mainHeader.title")); // NOI18N
        mainHeader.setTitleFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        add(mainHeader, java.awt.BorderLayout.PAGE_START);

        jPanel9.setLayout(new java.awt.BorderLayout());

        reportPanel.setLayout(new java.awt.BorderLayout());

        jToolBar3.setRollover(true);

        reloadChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unhcr/eg/registration/tool/token/printing/1421940027_reload_all_tabs.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(reloadChartButton, org.openide.util.NbBundle.getMessage(TokenPrintingTopComponent.class, "TokenPrintingTopComponent.reloadChartButton.text")); // NOI18N
        reloadChartButton.setFocusable(false);
        reloadChartButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reloadChartButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reloadChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadChartButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(reloadChartButton);

        categoryButtonGroup.add(dailyToggleButton);
        dailyToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unhcr/eg/registration/tool/token/printing/1421940493_Calendar.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(dailyToggleButton, org.openide.util.NbBundle.getMessage(TokenPrintingTopComponent.class, "TokenPrintingTopComponent.dailyToggleButton.text")); // NOI18N
        dailyToggleButton.setFocusable(false);
        dailyToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dailyToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        dailyToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dailyToggleButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(dailyToggleButton);

        categoryButtonGroup.add(cumulativeToggleButton);
        cumulativeToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unhcr/eg/registration/tool/token/printing/1421940545_piechart.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(cumulativeToggleButton, org.openide.util.NbBundle.getMessage(TokenPrintingTopComponent.class, "TokenPrintingTopComponent.cumulativeToggleButton.text")); // NOI18N
        cumulativeToggleButton.setFocusable(false);
        cumulativeToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cumulativeToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cumulativeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cumulativeToggleButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(cumulativeToggleButton);

        reportPanel.add(jToolBar3, java.awt.BorderLayout.NORTH);

        jPanel9.add(reportPanel, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        timeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        timeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unhcr/eg/registration/tool/token/printing/1423434044_clock_48.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(timeLabel, org.openide.util.NbBundle.getMessage(TokenPrintingTopComponent.class, "TokenPrintingTopComponent.timeLabel.text")); // NOI18N
        jPanel1.add(timeLabel, java.awt.BorderLayout.NORTH);

        dataCollectionPanel.setLayout(new java.awt.BorderLayout());
        jPanel1.add(dataCollectionPanel, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.BorderLayout());
        jPanel9.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        add(jPanel9, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents



    private void reloadChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadChartButtonActionPerformed
        try {
            TokenDateFilter form = new TokenDateFilter();
            form.setStartDate(TokenManagerService.getMinReceptionDate());
            form.setEndDate(TokenManagerService.getMaxReceptionDate());
            String msg = "Date Filtration for Arrival Chart";
            DialogDescriptor dd = new DialogDescriptor(form, msg);
            Object result = DialogDisplayer.getDefault().notify(dd);
            if (result == NotifyDescriptor.OK_OPTION) {
                if (form.getStartDate() != null && form.getEndDate() != null) {
                    arrivalChart.getFreshData(form.getStartDate(), form.getEndDate());
                } else {
                    arrivalChart.getFreshData();
                }
            }
            categoryButtonGroup.clearSelection();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_reloadChartButtonActionPerformed

    private void dailyToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailyToggleButtonActionPerformed
        arrivalChart.getOfflineData(0,1);

    }//GEN-LAST:event_dailyToggleButtonActionPerformed

    private void cumulativeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cumulativeToggleButtonActionPerformed
        arrivalChart.getOfflineData(1,1);

    }//GEN-LAST:event_cumulativeToggleButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup categoryButtonGroup;
    private javax.swing.JToggleButton cumulativeToggleButton;
    private javax.swing.JToggleButton dailyToggleButton;
    private javax.swing.JPanel dataCollectionPanel;
    private java.util.List<org.unhcr.eg.registration.tool.token.printing.models.Gate> gates;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToolBar jToolBar3;
    private org.jdesktop.swingx.JXHeader mainHeader;
    private javax.swing.JButton reloadChartButton;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JLabel timeLabel;
    private java.util.List<org.unhcr.eg.registration.tool.token.printing.models.VisitCategory> visitCategories;
    private java.util.List<org.unhcr.eg.registration.tool.token.printing.models.VisitReason> visitReasons;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
